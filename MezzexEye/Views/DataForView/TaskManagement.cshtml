@model MezzexEye.Models.TaskManagementViewModel

@{
    ViewData["Title"] = "Task Management";
}

<div id="taskSection" class="container my-5 p-4 bg-light shadow rounded">
    <h2 class="text-center mb-4">Task Management</h2>

    <!-- Staff Out Button -->
    <div class="d-flex mt-4">
        <button id="staffOutButton" class="btn btn-danger shadow-sm ms-auto">Staff Out</button>
    </div>

    <!-- Task Form Section -->
    <div id="taskForm" class="mb-4">
        <div class="row gy-3">
            <!-- Task Type Selection -->
            <div class="col-12 col-md-6">
                <div class="form-group">
                    <label for="taskType" class="form-label">Task Type</label>
                    <select id="taskType" class="form-control shadow-sm">
                        @foreach (var task in Model.TaskTypes)
                        {
                            <option value="@task.Id">@task.Name</option>
                        }
                    </select>
                </div>
            </div>
            <!-- Task Comment Input -->
            <div class="col-12 col-md-6">
                <div class="form-group">
                    <label for="taskComment" class="form-label">Task Comment</label>
                    <textarea id="taskComment" class="form-control shadow-sm" rows="1"></textarea>
                </div>
            </div>
        </div>
        <div class="text-center mt-4">
            <button id="startTaskButton" class="btn btn-primary shadow-sm px-4">Start Task</button>
        </div>
    </div>
    <!-- Active Tasks Section -->
    <div id="activeTasks" class="mt-5">
        <h3 class="text-center">Active Tasks</h3>
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Task Type</th>
                        <th>Comment</th>
                        <th>Start Time</th>
                        <th>Working Time</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="activeTasksBody">
                    @foreach (var task in Model.ActiveTasks)
                    {
                        <tr>
                            <td>@task.TaskName</td>
                            <td>@task.TaskComment</td>
                            <td>@task.TaskStartTime.ToString("HH:mm:ss")</td>
                            <td class="working-time" data-start-time="@task.TaskStartTime.ToString("o")"></td>
                            <td>
                                <button class="btn btn-danger endTaskButton w-100 my-1" data-task-id="@task.Id">End Task</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Completed Tasks Section -->
    <div id="completedTasks" class="mt-5">
        <h3 class="text-center">Completed Tasks</h3>
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Task Type</th>
                        <th>Comment</th>
                        <th>Start Time</th>
                        <th>End Time</th>
                        <th>Duration</th>
                    </tr>
                </thead>
                <tbody id="completedTasksBody">
                    @foreach (var task in Model.CompletedTasks)
                    {
                        <tr>
                            <td>@task.TaskName</td>
                            <td>@task.TaskComment</td>
                            <td>@task.TaskStartTime.ToString("HH:mm:ss")</td>
                            <td>@task.TaskEndTime?.ToString("HH:mm:ss")</td>
                            <td class="task-duration" data-start-time="@task.TaskStartTime.ToString("o")" data-end-time="@task.TaskEndTime?.ToString("o")"></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('startTaskButton').addEventListener('click', startTask);
            document.getElementById('staffOutButton').addEventListener('click', staffOut);
            document.querySelectorAll('.endTaskButton').forEach(button => {
                button.addEventListener('click', function () {
                    endTask(this.getAttribute('data-task-id'));
                });
            });

            updateWorkingTimes();
            setInterval(updateWorkingTimes, 1000);
        });

        function getAntiForgeryToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]').value;
        }

        function startTask() {
            const activeTasksBody = document.getElementById('activeTasksBody');

            if (activeTasksBody && activeTasksBody.children.length > 0) {
                alert("You already have an active task. Please end it before starting a new one.");
                return;
            }

            const taskTypeElement = document.getElementById('taskType');
            const taskCommentElement = document.getElementById('taskComment');

            if (!taskTypeElement || !taskCommentElement) {
                console.error("Task type or comment element is missing.");
                return;
            }

            const selectedTaskName = taskTypeElement.options[taskTypeElement.selectedIndex].text;
            const taskComment = taskCommentElement.value.trim();

            if (selectedTaskName === "Other" && taskComment === "") {
                alert("Please add a comment for 'Other' task type.");
                return;
            }

            fetch('@Url.Action("StartTask", "DataForView")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({
                    TaskId: taskTypeElement.value,
                    TaskComment: taskComment,
                    ClientTimeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
                })
            })
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    location.reload();
                })
                .catch(error => console.error('Error:', error));
        }

        function endTask(taskId) {
            checkClockInStatus().then(isClockedIn => {
                if (!isClockedIn) return;

                fetch('@Url.Action("EndTask", "DataForView")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({
                        Id: taskId,
                        ClientTimeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        alert(data.message);
                        location.reload();
                    })
                    .catch(error => console.error('Error:', error));
            });
        }

        function staffOut() {
            fetch('@Url.Action("StaffOut", "DataForView")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({
                    ClientTimeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
                })
            })
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    location.reload();
                })
                .catch(error => console.error('Error:', error));
        }

        function checkClockInStatus() {
            return fetch('@Url.Action("CheckClockInStatus", "DataForView")', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (!data.isClockedIn) {
                        alert("You need to clock in first.");
                        return false;
                    }
                    return true;
                })
                .catch(error => {
                    console.error('Error:', error);
                    return false;
                });
        }

        function updateWorkingTimes() {
            const workingTimeElements = document.querySelectorAll('.working-time');
            const now = new Date();

            workingTimeElements.forEach(element => {
                const startTime = new Date(element.getAttribute('data-start-time'));
                const diff = new Date(now - startTime);
                const hours = diff.getUTCHours().toString().padStart(2, '0');
                const minutes = diff.getUTCMinutes().toString().padStart(2, '0');
                const seconds = diff.getUTCSeconds().toString().padStart(2, '0');
                element.textContent = `${hours}:${minutes}:${seconds}`;
            });

            const durationElements = document.querySelectorAll('.task-duration');
            durationElements.forEach(element => {
                const startTime = new Date(element.getAttribute('data-start-time'));
                const endTime = new Date(element.getAttribute('data-end-time'));
                if (endTime) {
                    const diff = new Date(endTime - startTime);
                    const hours = diff.getUTCHours().toString().padStart(2, '0');
                    const minutes = diff.getUTCMinutes().toString().padStart(2, '0');
                    const seconds = diff.getUTCSeconds().toString().padStart(2, '0');
                    element.textContent = `${hours}:${minutes}:${seconds}`;
                }
            });
        }

    </script>
}
